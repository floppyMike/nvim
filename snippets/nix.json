{
	"cpp": {
		"prefix": "flake-cpp",
		"body": [
			"{",
			"  description = \"$1\";",
			"",
			"  inputs = {",
			"    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";",
			"  };",
			"",
			"  outputs = { self, nixpkgs, ... }@inputs:",
			"    let",
			"      pkgs = import nixpkgs {",
			"        system = \"x86_64-linux\";",
			"        config.allowUnfree = true;",
			"      };",
			"      # Dev time (developing tools)",
			"      devInputs = with pkgs; [",
			"        valgrind",
			"      ];",
			"      # Build time (build tools; header libs)",
			"      nativeBuildInputs = with pkgs; [",
			"        cmake",
			"        clang-tools",
			"      ];",
			"      # Run time (libs to link with)",
			"      buildInputs = with pkgs; [",
			"      ];",
			"",
			"    in {",
			"    # Utilized by `nix develop`",
			"    devShell.x86_64-linux = pkgs.mkShell.override { stdenv = pkgs.clangStdenv; } {",
			"      name = \"$2\";",
			"      inherit buildInputs;",
			"      nativeBuildInputs = nativeBuildInputs ++ devInputs;",
			"    };",
			"",
			"    # Utilized by `nix build`",
			"    defaultPackage.x86_64-linux = pkgs.clangStdenv.mkDerivation rec {",
			"      pname = \"$2\";",
			"      version = \"0.1.0\";",
			"      src = ./.;",
			"",
			"      inherit nativeBuildInputs;",
			"      inherit buildInputs;",
			"",
			"      buildPhase = \"make -j $$NIX_BUILD_CORES\";",
			"",
			"      installPhase = ''",
			"        runHook preInstall",
			"        install -m755 -D $2 $$out/bin/$2",
			"        runHook postInstall",
			"      '';",
			"    };",
			"",
			"    # Utilized by `nix run`",
			"    apps.x86_64-linux = {",
			"      type = \"app\";",
			"      program = self.packages.x86_64-linux.$2;",
			"    };",
			"  };",
			"}"
		],
		"description": "Generate a nix flake template for cpp projects"
	},
	"zig": {
		"prefix": "flake-zig",
		"body": [
			"{",
			"  description = \"$1\";",
			"",
			"  inputs = {",
			"    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";",
			"  };",
			"",
			"  outputs = { self, nixpkgs, ... }@inputs:",
			"    let",
			"      pkgs = import nixpkgs {",
			"        system = \"x86_64-linux\";",
			"        config.allowUnfree = true;",
			"      };",
			"      # Dev time (developing tools)",
			"      devInputs = with pkgs; [",
			"        zls",
			"      ];",
			"      # Build time (build tools; header libs)",
			"      nativeBuildInputs = with pkgs; [",
			"        zig",
			"      ];",
			"      # Run time (libs to link with)",
			"      buildInputs = with pkgs; [",
			"      ];",
			"",
			"    in {",
			"    # Utilized by `nix develop`",
			"    devShell.x86_64-linux = pkgs.mkShell.override { stdenv = pkgs.clangStdenv; } {",
			"      name = \"$2\";",
			"      inherit buildInputs;",
			"      nativeBuildInputs = nativeBuildInputs ++ devInputs;",
			"    };",
			"",
			"    # Utilized by `nix build`",
			"    defaultPackage.x86_64-linux = pkgs.clangStdenv.mkDerivation rec {",
			"      pname = \"$2\";",
			"      version = \"0.1.0\";",
			"      src = ./.;",
			"",
			"      inherit nativeBuildInputs;",
			"      inherit buildInputs;",
			"",
			"      dontConfigure = true;",
			"      dontInstall = true;",
			"      doCheck = true;",
			"",
			"      buildPhase = ''",
			"        zig build install --cache-dir $$(pwd)/zig-cache --global-cache-dir $$(pwd)/.cache -Doptimize=ReleaseSafe --prefix $$out",
			"      '';",
			"      installPhase = ''",
			"        zig build test --cache-dir $$(pwd)/zig-cache --global-cache-dir $$(pwd)/.cache",
			"      '';",
			"    };",
			"",
			"    # Utilized by `nix run`",
			"    apps.x86_64-linux = {",
			"      type = \"app\";",
			"      program = self.packages.x86_64-linux.$2;",
			"    };",
			"  };",
			"}"
		],
		"description": "Generate a nix flake template for zig projects"
	},
	"rust": {
		"prefix": "flake-rust",
		"body": [
			"{",
			"  description = \"$1\";",
			"",
			"  inputs = {",
			"    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";",
			"  };",
			"",
			"  outputs = { self, nixpkgs, ... }@inputs:",
			"    let",
			"      pkgs = import nixpkgs {",
			"        system = \"x86_64-linux\";",
			"        config.allowUnfree = true;",
			"      };",
			"      # Dev time (developing tools)",
			"      devInputs = with pkgs; [",
			"        rustup",
			"      ];",
			"      # Build time (build tools; header libs)",
			"      nativeBuildInputs = with pkgs; [",
			"      ];",
			"      # Run time (libs to link with)",
			"      buildInputs = with pkgs; [",
			"      ];",
			"",
			"    in {",
			"    # Utilized by `nix develop`",
			"    devShell.x86_64-linux = pkgs.mkShell.override { stdenv = pkgs.clangStdenv; } {",
			"      name = \"$2\";",
			"      inherit buildInputs;",
			"      nativeBuildInputs = nativeBuildInputs ++ devInputs;",
			"    };",
			"",
			"    # Utilized by `nix build`",
			"    defaultPackage.x86_64-linux = pkgs.rustPlatform.buildRustPackage rec {",
			"      pname = \"$2\";",
			"      version = \"0.1.0\";",
			"      src = ./.;",
			"",
			"      inherit nativeBuildInputs;",
			"      inherit buildInputs;",
			"",
			"      cargoLock = {",
			"        lockFile = ./Cargo.lock;",
			"      };",
			"    };",
			"",
			"    # Utilized by `nix run`",
			"    apps.x86_64-linux = {",
			"      type = \"app\";",
			"      program = self.packages.x86_64-linux.$2;",
			"    };",
			"  };",
			"}"
		],
		"description": "Generate a nix flake template for rust projects"
	}
}
